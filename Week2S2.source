// Sorry I was not aware that I needed to do this before the studios

/*
    biggie() returns a biggie-sized combo meal. 
    Some important encoding specificaitons are as follows
    
    Classic Single Combo (hamburger with one patty) -> 1
    Classic Double With Cheese Combo (2 patties) -> 2
    Classic Triple with Cheese Combo (3 patties) -> 3
    Avant-Garde Quadruple with Guacamole Combo (4 patties) -> 4
    
    -----> Biggie size: larger box of fries and drinks
    
    1 biggie size = 5
    2 biggie size = 6
    3 biggie size = 7
    4 biggie size = 8


    checks are to be performed before the function is called.
    infered from:
  For all the problems below, you can assume that the input arguments to your 
  functions are of the correct types and within the correct range of values.
*/

// Q1: biggie_size(encoded_combo) takes in an encoded combo and adds 4 in response
// to biggie sizing a combo meal
function biggie_size(encoded_combo){
    return encoded_combo + 4;
}

// Q2: biggie_size(encoded_biggie_combo) takes in an encoded combo and subtracts 4 
// to get the original encoded combo meal
function unbiggie_size(encoded_biggie_combo){
    return encoded_biggie_combo - 4;
}

// Q3: is_biggie_size(encoded_combo) returns true if a combo has been biggie sized
// false if it hasn't
function is_biggie_size(encoded_combo){
    return encoded_combo > 4; 
}

// consider using global variables!*
// Q4: determines if the combo is biggie size. multiplies patty price by the number of 
// patties, and adds in biggie size extra cost where neccessary. 
function combo_price(combo){
    const patty_price = 1.17;
    const biggie_sized_extra = 0.5;
    return is_biggie_size(combo) ? unbiggie_size(combo) * patty_price + biggie_sized_extra : 
            combo * patty_price;
}

// Q5: order is a collection of combos. empty_order() returns 0 representing 
// no combos in the collection
function empty_order(){
    return 0;
}

// Q6: add_to_order(collection, new_combo) will take in a order, multiply 
// by 10, and add the new_combo to the order.
function add_to_order(collection, new_combo){
    const temporary_collection = collection * 10;
    return temporary_collection + new_combo;
}

// Q7: last_combo(collection) returns the last combo of the order
function last_combo(collection){
    return collection % 10;
}

// Q8: other_combos(collection) returns the original order without the last combo
function other_combos(collection){
    const previous_combo = last_combo(collection);
    return (collection - previous_combo) / 10;
}
